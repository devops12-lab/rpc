package com.ztuo.bc.wallet.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 *
 * This class was generated by MyBatis Generator.
 * This class corresponds to the database table t_address_eth
 */
@ApiModel(value="com.ztuo.bc.wallet.model.AddressEth")
@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class AddressEth implements Cloneable, Serializable {
    /**
     * Database Column Remarks:
     *   地址
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_address_eth.address
     */
    @ApiModelProperty(value="address地址")
    private String address;

    /**
     * Database Column Remarks:
     *   私钥
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_address_eth.pri_key
     */
    @ApiModelProperty(value="priKey私钥")
    @JsonIgnore
    private String priKey;

    /**
     * Database Column Remarks:
     *   aes密钥
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_address_eth.aes_key
     */
    @ApiModelProperty(value="aesKeyaes密钥")
    @JsonIgnore
    private String aesKey;

    /**
     * Database Column Remarks:
     *   生成geth密钥的密码
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_address_eth.password
     */
    @ApiModelProperty(value="password生成geth密钥的密码")
    @JsonIgnore
    private String password;

    /**
     * Database Column Remarks:
     *   系统ID
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_address_eth.sys_id
     */
    @ApiModelProperty(value="sysId系统ID")
    private String sysId;

    /**
     * Database Column Remarks:
     *   是否启用
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_address_eth.is_enable
     */
    @ApiModelProperty(value="isEnable是否启用")
    private String isEnable;

    /**
     * Database Column Remarks:
     *   是否删除
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_address_eth.is_delete
     */
    @ApiModelProperty(value="isDelete是否删除")
    private String isDelete;

    /**
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_address_eth.create_time
     */
    @ApiModelProperty(value="createTime")
    private Date createTime;

    /**
     * Database Column Remarks:
     *   更新时间
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_address_eth.update_time
     */
    @ApiModelProperty(value="updateTime更新时间")
    private Date updateTime;

    /**
     * Database Column Remarks:
     *   备注
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_address_eth.remark
     */
    @ApiModelProperty(value="remark备注")
    private String remark;

    /**
     * Database Column Remarks:
     *   大钱包标识 0：否 1:是
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_address_eth.master_flg
     */
    @ApiModelProperty(value="masterFlg大钱包标识 0：否 1:是")
    private String masterFlg;

    /**
     * Database Column Remarks:
     *   交易次数
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_address_eth.nonce
     */
    @ApiModelProperty(value="nonce交易次数")
    private Integer nonce;

    @ApiModelProperty(value="币种信息")
    private List<BalanceEth> balanceList;
    /**
     * Database Column Remarks:
     *   用户ID
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_address_eth.user_id
     */
    @ApiModelProperty(value="userId用户ID")
    private String userId;

    private static final long serialVersionUID = 1L;

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName());
        sb.append(" [");
        sb.append("Hash = ").append(hashCode());
        sb.append(", address=").append(address);
        sb.append(", priKey=").append(priKey);
        sb.append(", aesKey=").append(aesKey);
        sb.append(", password=").append(password);
        sb.append(", sysId=").append(sysId);
        sb.append(", isEnable=").append(isEnable);
        sb.append(", isDelete=").append(isDelete);
        sb.append(", createTime=").append(createTime);
        sb.append(", updateTime=").append(updateTime);
        sb.append(", remark=").append(remark);
        sb.append(", masterFlg=").append(masterFlg);
        sb.append(", nonce=").append(nonce);
        sb.append(", userId=").append(userId);
        sb.append(", serialVersionUID=").append(serialVersionUID);
        sb.append("]");
        return sb.toString();
    }

    @Override
    public AddressEth clone() throws CloneNotSupportedException {
        return (AddressEth) super.clone();
    }

    /**
     * This enum was generated by MyBatis Generator.
     * This enum corresponds to the database table t_address_eth
     */
    public enum Column {
        address("address", "address", "VARCHAR", false),
        priKey("pri_key", "priKey", "VARCHAR", false),
        aesKey("aes_key", "aesKey", "VARCHAR", false),
        password("password", "password", "VARCHAR", true),
        sysId("sys_id", "sysId", "VARCHAR", false),
        isEnable("is_enable", "isEnable", "VARCHAR", false),
        isDelete("is_delete", "isDelete", "VARCHAR", false),
        createTime("create_time", "createTime", "TIMESTAMP", false),
        updateTime("update_time", "updateTime", "TIMESTAMP", false),
        remark("remark", "remark", "VARCHAR", false),
        masterFlg("master_flg", "masterFlg", "VARCHAR", false),
        nonce("nonce", "nonce", "INTEGER", false),
        userId("user_id", "userId", "VARCHAR", false);

        private static final String BEGINNING_DELIMITER = "`";

        private static final String ENDING_DELIMITER = "`";

        private final String column;

        private final boolean isColumnNameDelimited;

        private final String javaProperty;

        private final String jdbcType;

        public String value() {
            return this.column;
        }

        public String getValue() {
            return this.column;
        }

        public String getJavaProperty() {
            return this.javaProperty;
        }

        public String getJdbcType() {
            return this.jdbcType;
        }

        Column(String column, String javaProperty, String jdbcType, boolean isColumnNameDelimited) {
            this.column = column;
            this.javaProperty = javaProperty;
            this.jdbcType = jdbcType;
            this.isColumnNameDelimited = isColumnNameDelimited;
        }

        public String desc() {
            return this.getEscapedColumnName() + " DESC";
        }

        public String asc() {
            return this.getEscapedColumnName() + " ASC";
        }

        public static Column[] excludes(Column ... excludes) {
            ArrayList<Column> columns = new ArrayList<>(Arrays.asList(Column.values()));
            if (excludes != null && excludes.length > 0) {
                columns.removeAll(new ArrayList<>(Arrays.asList(excludes)));
            }
            return columns.toArray(new Column[]{});
        }

        public static Column[] all() {
            return Column.values();
        }

        public String getEscapedColumnName() {
            if (this.isColumnNameDelimited) {
                return new StringBuilder().append(BEGINNING_DELIMITER).append(this.column).append(ENDING_DELIMITER).toString();
            } else {
                return this.column;
            }
        }

        public String getAliasedEscapedColumnName() {
            return this.getEscapedColumnName();
        }
    }
}